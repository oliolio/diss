import os
import openmc
import numpy as np
import openmc.deplete


ROOT_DIR = "/home/hpcatta/submit1/beyond_100"
DEPLETION_FILE = "/home/hpcatta/submit1/mchain_endfb80_pwr.xml"
CROSS_SECTION_FILE = '/home/hpcatta/openmc/endfb-viii.0-hdf5/cross_sections.xml'

ENRICHMENT_VALUES = "enrichments.txt"
RADIUS_VALUES = "fuel_radius.txt"

def get_cross_sections():
    os.environ['OPENMC_CROSS_SECTIONS'] = os.path.abspath(CROSS_SECTION_FILE)
    openmc.config['cross_sections'] = CROSS_SECTION_FILE


get_cross_sections()

#optiuga 

#66 9 1.1840006743496128 4.6519824410662265 3.54677046905848 7.503610033075448 5.2399738275016965 9.171802747184602 4.480510475989577 7.261869344377274 1.5219183632715647 0.0005610568900411555

r1 = {{r1}}
r2 = {{r2}}
r3 = {{r3}}
r4 = {{r4}}
r5 = {{r5}}
r6 = {{r6}}
r7 = {{r7}}
r8 = {{r8}}
r9 = {{r9}}
r10 = {{r10}}
r11 = {{r11}}
r12 = {{r12}}
t_ifba = {{t_ifba}}


# r1 = 7.324651690282735
# r2 = 12.506420793191195 
# r3 = 2.923832724320935 
# r4 = 1.1840006743496128 
# r5 = 1.1840006743496128
# r6 = 4.6519824410662265
# r7 = 3.54677046905848 
# r8 = 7.503610033075448 
# r9 = 5.2399738275016965 
# r10 = 9.171802747184602
# r11 = 4.480510475989577
# r12 = 1.5219183632715647
# t_ifba = 0.0005610568900411555

FUEL_AND_IFBA_OUTER_RADIUS = 0.415  # this is the radius of the 4 fuels plus the ifba
# default values from the original script
FR1=0.2074995
FR2=0.29344837714285715
FR3=0.35940230857142863
FR4=0.414999

def save_radius_values(fr1, fr2, fr3, fr4, thickness_ifba):
    """enrichments shall be saved into file."""
    gen_pop = os.path.split(os.path.abspath(os.curdir))[-1].split("_")
    with open(os.path.join(ROOT_DIR, RADIUS_VALUES), 'a') as file:
        line = f"{gen_pop[0]} {gen_pop[1]} {fr1} {fr2} {fr3} {fr4} {FUEL_AND_IFBA_OUTER_RADIUS} {thickness_ifba}\n"
        file.write(line)


def get_fuel_radius_values(ifba_thickness: float):
    """Scales the fuel ring radius values according to the change of the
    ifba thickness keeping the total radius fixed"""
    fr4_new = FUEL_AND_IFBA_OUTER_RADIUS - ifba_thickness
    alpha = fr4_new / FR4
    fr1 = FR1 * alpha
    fr2 = fr1 + (FR2 - FR1) * alpha
    fr3 = fr2 + (FR3 - FR2) * alpha
    fr4 = fr4_new
    return fr1, fr2, fr3, fr4


def run_calculation(r1__, r2__, r3__, r4__, r5__, r6__, r7__, r8__, r9__, r10__, r11__, r12__,
                    thickness_ifba=None):
    if thickness_ifba is None:
        thickness_ifba = FUEL_AND_IFBA_OUTER_RADIUS-FR4
    plot_pixels = 1200
    mesh_nr = 17
    

    def define_universe_components(r1_, r2_, r3_, r4_, r5_, r6_, r7_, r8_, r9_, r10_, r11_, r12_,no_of_pins,
                                   thickness_ifba_ = FUEL_AND_IFBA_OUTER_RADIUS-FR4, rho_Gd2O3=7.41):
        # -------------------------------------------------------------------
        # thickness_ifba_ should have a value between 0 and FUEL_AND_IFBA_OUTER_RADIUS
        fr1, fr2, fr3, fr4 = get_fuel_radius_values(thickness_ifba_)
        #save_radius_values(fr1, fr2, fr3, fr4, thickness_ifba_)
        fuel_radius1 = openmc.ZCylinder(r=fr1)
        fuel_radius2 = openmc.ZCylinder(r=fr2)
        fuel_radius3 = openmc.ZCylinder(r=fr3)
        fuel_outer_radius = openmc.ZCylinder(r=fr4)
        ifba_radius = openmc.ZCylinder(r=FUEL_AND_IFBA_OUTER_RADIUS)
        # -------------------------------------------------------------------
        clad_inner_radius = openmc.ZCylinder(r=0.4177)
        clad_outer_radius = openmc.ZCylinder(r=0.4749)
        gt_inner_radius = openmc.ZCylinder(r=0.5715)
        gt_outer_radius = openmc.ZCylinder(r=0.612)
        lower_cutback_height = openmc.ZPlane(z0=-426.0 / 2.0 + 15)
        upper_cutback_height = openmc.ZPlane(z0=+426.0 / 2.0 - 15)
        fuel_bottom = openmc.ZPlane(z0=-426.0 / 2.0, boundary_type='reflective')
        fuel_top = openmc.ZPlane(z0=+426.0 / 2.0, boundary_type='reflective')
        # fuel for main axial fuel region
        materials=openmc.Materials([])
        f_1 = openmc.Material(name='Fuel 1')
        f_1.add_element('U', 1.0, enrichment=r1_)
        f_1.add_nuclide('O16', 2.0)
        f_1.set_density('g/cc', 10.4)
        f_1.volume = (np.pi * fuel_radius1.r ** 2) * 396 * no_of_pins
        materials+=[f_1]
        f_2 = openmc.Material(name='Fuel 2')
        f_2.add_element('U', 1.0, enrichment=r2_)
        f_2.add_nuclide('O16', 2.0)
        f_2.set_density('g/cc', 10.4)
        f_2.volume = np.pi * (fuel_radius2.r ** 2 - fuel_radius1.r ** 2) * 396 * no_of_pins
        materials+=[f_2]
        f_3 = openmc.Material(name='Fuel 3')
        f_3.add_element('U', 1.0, enrichment=r3_)
        f_3.add_nuclide('O16', 2.0)
        f_3.set_density('g/cc', 10.4)
        f_3.volume = np.pi * (fuel_radius3.r ** 2 - fuel_radius2.r ** 2) * 396 * no_of_pins
        materials+=[f_3]
        f_4 = openmc.Material(name='Fuel 4')
        f_4.add_element('U', 1.0, enrichment=r4_)
        f_4.add_nuclide('O16', 2.0)
        f_4.set_density('g/cc', 10.4)
        f_4.volume = np.pi * (fuel_outer_radius.r ** 2 - fuel_radius3.r ** 2) * 396* no_of_pins
        materials+=[f_4]
        # fuel for lower cutback region
        f_1b = openmc.Material(name='Fuel 1b')
        f_1b.add_element('U', 1.0, enrichment=r5_)
        f_1b.add_nuclide('O16', 2.0)
        f_1b.set_density('g/cc', 10.4)
        f_1b.volume = (np.pi * fuel_radius1.r ** 2) * 15 * no_of_pins
        materials+=[f_1b]
        f_2b = openmc.Material(name='Fuel 2b')
        f_2b.add_element('U', 1.0, enrichment=r6_)
        f_2b.add_nuclide('O16', 2.0)
        f_2b.set_density('g/cc', 10.4)
        materials+=[f_2b]
        f_2b.volume = np.pi * (fuel_radius2.r ** 2 - fuel_radius1.r ** 2) * 15 * no_of_pins
        f_3b = openmc.Material(name='Fuel 3b')
        f_3b.add_element('U', 1.0, enrichment=r7_)
        f_3b.add_nuclide('O16', 2.0)
        f_3b.set_density('g/cc', 10.4)
        f_3b.volume = np.pi * (fuel_radius3.r ** 2 - fuel_radius2.r ** 2) * 15 * no_of_pins
        materials+=[f_3b]
        f_4b = openmc.Material(name='Fuel 4b')
        f_4b.add_element('U', 1.0, enrichment=r8_)
        f_4b.add_nuclide('O16', 2.0)
        f_4b.set_density('g/cc', 10.4)
        f_4b.volume = np.pi * (fuel_outer_radius.r ** 2 - fuel_radius3.r ** 2) * 15 * no_of_pins
        materials+=[f_4b]
        ## Fuel for Upper Cutback Region
        f_1u = openmc.Material(name='Fuel 1u')
        f_1u.add_element('U', 1.0, enrichment=r9_)
        f_1u.add_nuclide('O16', 2.0)
        f_1u.set_density('g/cc', 10.4)
        f_1u.volume = (np.pi * fuel_radius1.r ** 2) * 15 * no_of_pins
        materials+=[f_1u]
        f_2u = openmc.Material(name='Fuel 2u')
        f_2u.add_element('U', 1.0, enrichment=r10_)
        f_2u.add_nuclide('O16', 2.0)
        f_2u.set_density('g/cc', 10.4)
        f_2u.volume = np.pi * (fuel_radius2.r ** 2 - fuel_radius1.r ** 2) * 15 * no_of_pins
        materials+=[f_2u]
        f_3u = openmc.Material(name='Fuel 3u')
        f_3u.add_element('U', 1.0, enrichment=r11_)
        f_3u.add_nuclide('O16', 2.0)
        f_3u.set_density('g/cc', 10.4)
        f_3u.volume = np.pi * (fuel_radius3.r ** 2 - fuel_radius2.r ** 2) * 15 * no_of_pins
        materials+=[f_3u]
        f_4u = openmc.Material(name='Fuel 4u')
        f_4u.add_element('U', 1.0, enrichment=r12_)
        f_4u.add_nuclide('O16', 2.0)
        f_4u.set_density('g/cc', 10.4)
        f_4u.volume = np.pi * (fuel_outer_radius.r ** 2 - fuel_radius3.r ** 2) * 15 * no_of_pins
        materials+=[f_4u]
        ####
        Gd2O3 = openmc.Material(name='Gd2O3')
        Gd2O3.add_element('Gd', 2.0)
        Gd2O3.add_nuclide('O16', 3.0)
        Gd2O3.set_density('g/cm3', rho_Gd2O3)
        Gd2O3.depletable = True
        Gd2O3.volume = np.pi * (ifba_radius.r ** 2 - fuel_outer_radius.r ** 2) * 426 * no_of_pins #could edit away from no_of_pins to instead be 12.5? Called later anyway
        materials+=[Gd2O3]
        zirconium = openmc.Material(name="zirconium")
        zirconium.add_element('Zr', 1.0)
        zirconium.set_density('g/cm3', 6.6)
        helium = openmc.Material(name='Helium')
        helium.add_element('He', 1.0)
        helium.set_density('g/cm3', 0.178e-3)
        water = openmc.Material(name='water')
        water.add_nuclide('H1', 2.0)
        water.add_nuclide('O16', 1.0)
        water.set_density('g/cm3', 1.0)
        water.add_s_alpha_beta('c_H_in_H2O')
        materials+=[helium, zirconium, water]
        #materials.export_to_xml()
        fuel1_region = -fuel_radius1 & +lower_cutback_height & -upper_cutback_height
        fuel2_region = +fuel_radius1 & -fuel_radius2 & +lower_cutback_height & -upper_cutback_height
        fuel3_region = +fuel_radius2 & -fuel_radius3 & +lower_cutback_height & -upper_cutback_height
        fuel4_region = +fuel_radius3 & -fuel_outer_radius & +lower_cutback_height & -upper_cutback_height
        # fuel_region = -fuel_outer_radius & +lower_cutback_height & -upper_cutback_height
        lower_cutback_region1 = -fuel_radius1 & -lower_cutback_height & +fuel_bottom
        lower_cutback_region2 = +fuel_radius1 & -fuel_radius2 & -lower_cutback_height & +fuel_bottom
        lower_cutback_region3 = +fuel_radius2 & -fuel_radius3 & -lower_cutback_height & +fuel_bottom
        lower_cutback_region4 = +fuel_radius3 & -fuel_outer_radius & -lower_cutback_height & +fuel_bottom
        upper_cutback_region1 = -fuel_radius1 & +upper_cutback_height & -fuel_top
        upper_cutback_region2 = +fuel_radius1 & -fuel_radius2 & +upper_cutback_height & -fuel_top
        upper_cutback_region3 = +fuel_radius2 & -fuel_radius3 & +upper_cutback_height & -fuel_top
        upper_cutback_region4 = +fuel_radius3 & -fuel_outer_radius & +upper_cutback_height & -fuel_top
        # -----------------------------------------------------------------------
        ifba_region = +fuel_outer_radius & -ifba_radius & +fuel_bottom & -fuel_top
        # -----------------------------------------------------------------------
        gap_region = +ifba_radius & -clad_inner_radius & +fuel_bottom & -fuel_top
        clad_region = +clad_inner_radius & -clad_outer_radius & +fuel_bottom & -fuel_top
        gt_water_region = -gt_inner_radius & +fuel_bottom & -fuel_top
        gt_clad_region = +gt_inner_radius & -gt_outer_radius & +fuel_bottom & -fuel_top
        fuel1 = openmc.Cell(name='fuel1')
        fuel1.fill = f_1
        fuel1.region = fuel1_region
        fuel2 = openmc.Cell(name='fuel2')
        fuel2.fill = f_2
        fuel2.region = fuel2_region
        fuel3 = openmc.Cell(name='fuel3')
        fuel3.fill = f_3
        fuel3.region = fuel3_region
        fuel4 = openmc.Cell(name='fuel4')
        fuel4.fill = f_4
        fuel4.region = fuel4_region
        lower_cutback1 = openmc.Cell(name='Lower cutback')
        lower_cutback1.fill = f_1b
        lower_cutback1.region = lower_cutback_region1
        lower_cutback2 = openmc.Cell(name='Lower cutback')
        lower_cutback2.fill = f_2b
        lower_cutback2.region = lower_cutback_region2
        lower_cutback3 = openmc.Cell(name='Lower cutback')
        lower_cutback3.fill = f_3b
        lower_cutback3.region = lower_cutback_region3
        lower_cutback4 = openmc.Cell(name='Lower cutback')
        lower_cutback4.fill = f_4b
        lower_cutback4.region = lower_cutback_region4
        upper_cutback1 = openmc.Cell(name='Upper cutback')
        upper_cutback1.fill = f_1u
        upper_cutback1.region = upper_cutback_region1
        upper_cutback2 = openmc.Cell(name='Upper cutback')
        upper_cutback2.fill = f_2u
        upper_cutback2.region = upper_cutback_region2
        upper_cutback3 = openmc.Cell(name='Upper cutback')
        upper_cutback3.fill = f_3u
        upper_cutback3.region = upper_cutback_region3
        upper_cutback4 = openmc.Cell(name='Upper cutback')
        upper_cutback4.fill = f_4u
        upper_cutback4.region = upper_cutback_region4
        # --------------------------------------------------------------------------------
        ifba = openmc.Cell(name='IFBA coating')
        ifba.fill = Gd2O3
        ifba.region = ifba_region 
        # --------------------------------------------------------------------------------
        gap = openmc.Cell(name='air gap')
        gap.region = gap_region
        gap.fill = helium
        clad = openmc.Cell(name='clad')
        clad.fill = zirconium
        clad.region = clad_region
        moderator = openmc.Cell(name='Moderator', fill=water,
                                region=+clad_outer_radius & -fuel_top & + fuel_bottom)
        return (gt_outer_radius, fuel_bottom, fuel_top, f_1, f_2, f_3, f_4, f_1b, f_2b, f_3b, f_4b, f_1u, f_2u, f_3u,
                f_4u, Gd2O3, zirconium, water, gt_water_region, gt_clad_region, fuel1, fuel2, fuel3, fuel4,
                lower_cutback1, lower_cutback2, lower_cutback3, lower_cutback4, upper_cutback1, upper_cutback2,
                upper_cutback3, upper_cutback4, gap, clad, moderator, ifba)

    (gt_outer_radius, fuel_bottom, fuel_top, f_1, f_2, f_3, f_4, f_1b, f_2b, f_3b, f_4b, f_1u, f_2u, f_3u, f_4u, Gd2O3,
     zirconium, water, gt_water_region, gt_clad_region, fuel1, fuel2, fuel3, fuel4, lower_cutback1, lower_cutback2,
     lower_cutback3, lower_cutback4, upper_cutback1, upper_cutback2, upper_cutback3, upper_cutback4, gap, clad,
     moderator, ifba) = define_universe_components(r1__, r2__, r3__, r4__, r5__, r6__, r7__, r8__, r9__, r10__, r11__,
                                                   r12__, thickness_ifba_=1E-6,no_of_pins=53.5)

    (gt_outer_radius_, fuel_bottom_, fuel_top_, f_1_, f_2_, f_3_, f_4_, f_1b_, f_2b_, f_3b_, f_4b_, f_1u_, f_2u_, f_3u_,
     f_4u_, Gd2O3_, zirconium_, water_, gt_water_region_, gt_clad_region_, fuel1_, fuel2_, fuel3_, fuel4_,
     lower_cutback1_, lower_cutback2_, lower_cutback3_, lower_cutback4_, upper_cutback1_, upper_cutback2_,
     upper_cutback3_, upper_cutback4_, gap_, clad_, moderator_,
     ifba_) = define_universe_components(r1__, r2__, r3__, r4__, r5__, r6__, r7__, r8__, r9__,
                                                                  r10__, r11__, r12__, thickness_ifba_=thickness_ifba,no_of_pins=12.5)

    # --------------------------------------------------------------------------------

    # Define inner and outer pin cell universes
    pin_cell_universe_outer = openmc.Universe(name='Fuel Pin (Outer)', cells=[
        fuel1, fuel2, fuel3, fuel4, lower_cutback1, lower_cutback2, lower_cutback3,
        lower_cutback4, upper_cutback1, upper_cutback2, upper_cutback3, upper_cutback4, ifba, gap,
        clad, moderator])

    pin_cell_universe_inner = openmc.Universe(name='Fuel Pin (Inner)', cells=[
        fuel1_, fuel2_, fuel3_, fuel4_, lower_cutback1_, lower_cutback2_, lower_cutback3_, lower_cutback4_,
        upper_cutback1_, upper_cutback2_, upper_cutback3_, upper_cutback4_, ifba_, gap_, clad_, moderator_])

    # --------------------------------------------------------------------------------

    gt1 = openmc.Cell(name='Guide tube filled with water', fill=water, region=gt_water_region)
    gt2 = openmc.Cell(name='Guide tube clad', fill=zirconium, region=gt_clad_region)
    mode = openmc.Cell(name='Moderator', fill=water,
                       region=+gt_outer_radius & -fuel_top & +fuel_bottom)
    gt = openmc.Universe(name='Guide Tube', cells=[gt1, gt2, mode])
    pitch = 1.26

    assembly = openmc.RectLattice(name='Fuel - 0BA')
    assembly.pitch = (pitch, pitch)
    assembly.lower_left = [-pitch * 17. / 2.0] * 2

    # --------------------------------------------------------------------------------
    assembly.universes = [[pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * 5 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_inner] * 2 + [
                              gt] + [pin_cell_universe_outer] * 5,
                          [pin_cell_universe_outer] * 3 + [gt] + [pin_cell_universe_inner] * 9 + [gt] + [
                              pin_cell_universe_outer] * 3,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_inner] * 2 + [
                              gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_outer] * 2,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_inner] * 2 + [
                              gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_outer] * 2,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_inner] * 2 + [
                              gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_outer] * 2,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * 3 + [gt] + [pin_cell_universe_inner] * 9 + [gt] + [
                              pin_cell_universe_outer] * 3,
                          [pin_cell_universe_outer] * 5 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [
                              pin_cell_universe_inner] * 2 + [
                              gt] + [pin_cell_universe_outer] * 5,
                          [pin_cell_universe_outer] * mesh_nr,
                          [pin_cell_universe_outer] * mesh_nr]

    # assembly.universes = [
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 1 - All outer pins
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 2 - All outer pins
    #     [pin_cell_universe_outer] * 5 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_outer] * 5,  # Row 3
    #     [pin_cell_universe_outer] * 3 + [gt] + [pin_cell_universe_inner] * 9 + [gt] + [pin_cell_universe_outer] * 3,  # Row 4
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 5 - All outer pins
    #     [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_outer] * 2,  # Row 6
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 7 - All outer pins
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 8 - All outer pins
    #     [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_outer] * 2,  # Row 9
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 10 - All outer pins
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 11 - All outer pins
    #     [pin_cell_universe_outer] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_outer] * 2,  # Row 12
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 13 - All outer pins
    #     [pin_cell_universe_outer] * 3 + [gt] + [pin_cell_universe_inner] * 9 + [gt] + [pin_cell_universe_outer] * 3,  # Row 14
    #     [pin_cell_universe_outer] * 5 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_inner] * 2 + [gt] + [pin_cell_universe_outer] * 5,  # Row 15
    #     [pin_cell_universe_outer] * mesh_nr,  # Row 16 - All outer pins
    #     [pin_cell_universe_outer] * mesh_nr   # Row mesh_nr - All outer pins
    # ]
    # --------------------------------------------------------------------------------

    root_cell = openmc.Cell(name='root cell', fill=assembly)
    min_x = openmc.XPlane(x0=0.0, boundary_type='reflective')
    max_x = openmc.XPlane(x0=+10.71, boundary_type='reflective')
    min_y = openmc.YPlane(y0=0.0, boundary_type='reflective')
    max_y = openmc.YPlane(y0=+10.71, boundary_type='reflective')

    # Add boundary planes
    root_cell.region = +min_x & -max_x & +min_y & -max_y & +fuel_bottom & -fuel_top

    # Create root Universe
    root_universe = openmc.Universe(name='root universe')
    root_universe.add_cell(root_cell)

    geometry = openmc.Geometry(root_universe)
    geometry.export_to_xml()

    point = openmc.stats.Point((5, 5, 0))
    source = openmc.source.Source(space=point)
    settings = openmc.Settings()
    settings.source = source
    settings.batches = 70
    settings.inactive = 50
    settings.particles = 5000
    settings.export_to_xml()

    tallies = openmc.Tallies()
    mesh = openmc.RegularMesh(mesh_id=1)
    mesh.dimension = [17,17]
    mesh.lower_left = [0.0, 0.0]
    mesh.width = [.63, .63]

    # Instantiate tally Filter
    mesh_filter = openmc.MeshFilter(mesh)

    # Instantiate the Tally
    tally = openmc.Tally(name='mesh tally')
    tally.filters = [mesh_filter]
    tally.scores = ['fission']

    # Add mesh and Tally to Tallies
    tallies.append(tally)
    tallies.export_to_xml()

    plot1 = openmc.Plot()
    plot1.filename = 'pinplot'
    plot1.origin = (pitch*9/2, pitch*9/2,0)
    plot1.width = (pitch * 9, pitch * 9)
    plot1.pixels = (plot_pixels, plot_pixels)
    plot1.color_by = 'material'
    plot1.colors = {f_1: 'red', f_2: 'orange', f_3: 'yellow', f_4: 'green', Gd2O3: 'maroon', water: 'blue',
                    f_1b: 'lightcoral', f_2b: 'gold', f_3b: 'khaki', f_4b: 'lightgreen', f_1u: 'darkred',
                    f_2u: 'chocolate',
                    f_3u: 'olive', f_4u: 'darkgreen'}

    plot2 = openmc.Plot()
    plot2.filename = 'XY basis'
    plot2.basis = 'xy'
    plot2.origin = (pitch*9/2, pitch*9/2,0)
    plot2.width = (pitch * 9, pitch * 9)
    plot2.pixels = (plot_pixels, plot_pixels)
    plot2.color_by = 'material'
    plot2.colors = {f_1: 'red', f_2: 'orange', f_3: 'yellow', f_4: 'green', Gd2O3: 'maroon', water: 'blue',
                    f_1b: 'lightcoral', f_2b: 'gold', f_3b: 'khaki', f_4b: 'lightgreen', f_1u: 'darkred',
                    f_2u: 'chocolate',
                    f_3u: 'olive', f_4u: 'darkgreen'}

    plot3 = openmc.Plot()
    plot3.filename = 'YZ basis'
    plot3.basis = 'yz'
    plot3.width = (pitch * 9, 426)
    plot3.pixels = (plot_pixels, plot_pixels)
    plot3.color_by = 'cell'
    plot3.colors = {f_1: 'red', f_2: 'orange', f_3: 'yellow', f_4: 'green', Gd2O3: 'maroon', water: 'blue',
                    f_1b: 'lightcoral', f_2b: 'gold', f_3b: 'khaki', f_4b: 'lightgreen', f_1u: 'darkred',
                    f_2u: 'chocolate',
                    f_3u: 'olive', f_4u: 'darkgreen'}
    plots = openmc.Plots([plot1, plot2, plot3])
    plots.export_to_xml()

    # openmc.run()

    model = openmc.Model(geometry=geometry, settings=settings)
    model.export_to_xml()
    operator = openmc.deplete.CoupledOperator(model, DEPLETION_FILE)
    power = 21.75E06 / 4  
    time_steps = [0.5, 1.5, 1, 27, 60, 90, 90, 90, 90, 30, 67.5]
    integrator = openmc.deplete.CECMIntegrator(operator, time_steps, power, timestep_units='d')
    integrator.integrate()

    # model = openmc.Model(geometry=geometry, settings=settings)
    # operator = openmc.deplete.CoupledOperator(model, DEPLETION_FILE)
    # power = 21.75E06/4
    # time_steps = [2] * time_step_nr
    # integrator = openmc.deplete.PredictorIntegrator(operator, time_steps, power, timestep_units='MWd/kg')
    # integrator.integrate()


def save_enrichments():
    """enrichments shall be saved into file."""
    gen_pop = os.path.split(os.path.abspath(os.curdir))[-1].split("_")
    with open(os.path.join(ROOT_DIR, ENRICHMENT_VALUES), 'a') as file:
        line = f"{gen_pop[0]} {gen_pop[1]} {r1} {r2} {r3} {r4} {r5} {r6} {r7} {r8} {r9} {r10} {r11} {r12} {t_ifba}\n"
        file.write(line)


save_enrichments()
run_calculation(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, thickness_ifba=t_ifba)
